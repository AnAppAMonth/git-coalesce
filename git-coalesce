#!/usr/bin/env python

VERSION = '0.2.0'

import sys
import re
import subprocess
import argparse
import hashlib
from time import sleep
from tempfile import gettempdir
import os
from os import path

symbol1 = re.compile(r'^\s*[{]+(.*?)[}]*\s*$')
symbol2 = re.compile(r'^\s*[{]+!')
symbol3 = re.compile(r'![}]+\s*$')

tmpdir = gettempdir()

if __name__ == "__main__":
    usage = 'git coalesce [options] [--exec <cmd>] [--onto <newbase>] [<upstream>] [<branch>]'
    description = """\
    This command is a wrapper over git-rebase(1) that automatically
    controls the interactive rebase operation and processes the
    special symbols it supports, without human intervention. You can
    pass it the same options you would pass to git-rebase(1), except
    "-i", which is already used.

    Note that if the rebase process is interrupted, you should use
    "git coalesce --continue" instead of "git rebase --continue"
    after resolving the issue. Just replace "rebase" with "coalesce"
    in the entire process.

    Supported Symbols

    1. One or more opening braces ({) at the beginning of the first
       line (summary) of the commit message, and zero or more closing
       braces (}) at the end of the line. This commit is considered a
       milestone and is combined with all previous commits up until
       the last milestone to form a single commit. The last commit in
       the sequence is always considered a milestone no matter what.

    2. One or more opening braces ({) followed by an exclamation mark
       (!) at the beginning of a line in the commit message. This
       symbol starts a block.

       An exclamation mark (!) followed by one or more closing braces
       (}) at the end of a line in the commit message. This symbol
       ends a block.

       Everything in such a block is used as part of the message of
       the new combined commit to which this commit belongs.

       Say commits c1, c2, ..., cN are combined, and each has a block
       of text m1, m2, ..., mN in their commit messages between these
       symbols, respectively (multiple such blocks in a commit message
       are concatenated to form a single block). The message of the
       combined commit is formed by aggregating m1 ~ mN in the following
       order: the first paragraph of mN, m1, m2, ..., m(N-1), the rest
       of mN.

       Of course, not all commits need to contain these symbols. In
       most cases you only need to include the message for the
       combined commit in the message of cN.

       If, however, none of c1 ~ cN contains these symbols, the default
       commit message which concatenates the messages of all "member"
       commits is used.
"""
    parser = argparse.ArgumentParser(usage=usage, description=description,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)

    list_help = "list all squashed commits at the end of the combined commit's message. " + \
                "For commits with summaries shorter than NUM chars, only include commit ID; " + \
                "otherwise include both ID and summary"
    parser.add_argument('-l', '--list', nargs='?', const=15, default=None, type=int, metavar='NUM=15', help=list_help)
    parser.add_argument('-v', '--version', action='version', version="%(prog)s version " + VERSION)
    ns, remaining = parser.parse_known_args()

    if len(remaining) and remaining[0][:10] == '--seqedit-':
        # We should behave as the sequence editor.

        # First read the value of the list option from the temp file
        rand = remaining[0][10:]
        tmpfn = path.join(tmpdir, 'tmp-' + rand)
        tmpfile = open(tmpfn, 'r+')
        list_opt = tmpfile.read().strip()
        if list_opt != 'None':
            min_len = int(list_opt)
            list_opt = True
            # Each entry in com_info is a 3-element array:
            #   - for commits with "long" summaries: [0, ID, summary]
            #   - for commits with "short" summaries: [1, startID, endID]
            # But there is a special entry 0, marking combined commit boundaries.
            com_info = []
            # Whether the previous commit has "short" summary
            prev_is_short = False
        else:
            list_opt = False

        # Records the starting and ending commit ID and number of commits
        sc = None
        ec = None
        num = 0

        # Open the sequence file used by git-rebase(1)
        target = open(remaining[1], 'r+')
        lines = target.read().splitlines()

        # Stores the result to be written to the sequence file
        result = []
        # Stores whether the previous commit is a milestone
        prev_is_milestone = True
        for ln in lines:
            ln = ln.strip()

            if ln[:1] in ['', '#']:
                break

            items = ln.split(' ', 2)
            try:
                mo = symbol1.match(items[2])
            except IndexError:
                target.close()
                tmpfile.close()
                if ln == 'noop':
                    exit(0)
                else:
                    exit(1)

            if mo:
                # This is a milestone
                if prev_is_milestone:
                    # The previous commit is a milestone, and this commit is
                    # also a milestone. We need to change the action of this
                    # commit to 'reword', because it doesn't have any commit
                    # to 'squash' onto it.
                    items[0] = 'reword'
                else:
                    items[0] = 'squash'
                    prev_is_milestone = True

                if list_opt:
                    items[2] = mo.group(1)

            elif prev_is_milestone:
                # The action should remain 'pick', except for a special case,
                # which we will handle at the end.
                prev_is_milestone = False
            else:
                items[0] = 'squash'

            result.append(items)

            # Add this commit's info to the com_info array if list_opt is True
            if list_opt:
                sha1 = items[1]
                summary = items[2].strip()

                if len(summary) >= min_len:
                    com_info.append([0, sha1, summary])
                    prev_is_short = False
                else:
                    if prev_is_short:
                        com_info[-1][2] = sha1
                    else:
                        com_info.append([1, sha1, sha1])
                        prev_is_short = True

                if prev_is_milestone:
                    # Insert a boundary after each milestone
                    com_info.append(0)
                    prev_is_short = False

            if sc == None:
                sc = items[1]
            ec = items[1]
            num += 1

        # Special case: if the last commit in the sequence is a 'pick', it should
        # be changed to 'reword', because it doesn't have any commit to 'squash'
        # onto it.
        if result[-1][0] == 'pick':
            result[-1][0] = 'reword'

        # Write to the sequence file
        target.seek(0)
        for items in result:
            target.write(' '.join(items) + '\n')
        target.truncate()
        target.close()

        # Update the temp file

        # First write the starting commit ID, ending commit ID and the number of
        # commits between them to the second line of the temp file.
        tmpfile.write('%s %s %s\n' % (sc, ec, num))

        # Then write the commit info if list_opt is True
        if list_opt:
            for com in com_info:
                if com == 0:
                    # Special entry marking combined commit boundaries
                    tmpfile.write('\n')
                elif com[0] == 0:
                    tmpfile.write('%s %s\n' % (com[1], com[2]))
                elif com[1] == com[2]:
                    tmpfile.write('%s\n' % com[1])
                else:
                    tmpfile.write('%s..%s\n' % (com[1], com[2]))

        tmpfile.close()

    elif len(remaining) and remaining[0][:10] == '--comedit-':
        # We should behave as the commit message editor.

        # First read the value of the list option and (if present) the commit
        # info lines.
        rand = remaining[0][10:]
        tmpfn = path.join(tmpdir, 'tmp-' + rand)
        tmpfile = open(tmpfn, 'r+')
        lines = tmpfile.read().splitlines()
        list_opt = lines[0].strip() != 'None'

        # Read and parse lines starting from line 3

        # progress indicates which combined commit we are currently processing,
        # or which time it is that we are called as a commit message editor,
        # starting at 0.
        progress = 0
        # Each entry in squashes is an array containing the "member" commits of
        # a combined commit.
        squashes = [[]]
        for ln in lines[2:]:
            ln = ln.strip()
            if ln == '':
                # We are at a combined commit boundary
                squashes.append([])
            elif ln[0] == '*':
                # We have reached the final "progress indicator" line
                progress = len(ln)
                break
            else:
                squashes[-1].append(ln)

        target = open(remaining[1], 'r+')
        lines = target.read().splitlines()

        # Each commit message block obviously can't contain a comment line, so
        # we can use comment lines as separators of commits.

        # Each part is an mX extracted from the message of a commit X. Each part
        # is an array containing paragraphs in that part.
        parts = [['']]
        in_comment_block = False
        symbol_found = False
        for ln in lines:
            if ln[:1] == '#':
                # We are in a comment block
                if not in_comment_block:
                    parts.append([''])
                    symbol_found = False
                    in_comment_block = True
                continue

            in_comment_block = False
            ln = ln.strip()

            if symbol_found:
                mo = symbol3.search(ln)
                if mo:
                    ln = ln[:mo.start(0)].strip()
                    if ln != '':
                        parts[-1][-1] += ln + '\n'
                        ln = ''
                    symbol_found = False

                # Add this line to parts[-1]
                if ln == '':
                    if parts[-1][-1] != '':
                        # New paragraph
                        parts[-1].append('')
                else:
                    # Add to the existing paragraph
                    parts[-1][-1] += ln + '\n'
            else:
                mo = symbol2.match(ln)
                if mo:
                    rest = ln[mo.end(0):].strip()
                    mo2 = None
                    if rest != '':
                        # See if the ending symbol is in the same line
                        mo2 = symbol3.search(rest)
                        if mo2:
                            rest = rest[:mo2.start(0)].strip()

                    if rest != '':
                        parts[-1][-1] += rest + '\n'

                    if mo2:
                        if parts[-1][-1] != '':
                            # New paragraph
                            parts[-1].append('')
                    else:
                        symbol_found = True

        # The last entry in parts should be discarded.
        parts.pop(-1)

        # Now construct the commit message for the combined commit.
        result = []
        if parts[-1][0] != '':
            result.append(parts[-1].pop(0))
        for part in parts:
            for paragraph in part:
                if paragraph != '':
                    result.append(paragraph)

        if len(result) > 0:
            target.seek(0)
            target.write('\n'.join(result))
            target.truncate()
        else:
            # Although we keep the original commit message in this case, we
            # still need to remove the special symbols.
            target.seek(0)
            for ln in lines:
                if ln[:1] != '#':
                    if ln != '':
                        ln = symbol2.sub('', ln, 1)
                        ln = symbol3.sub('', ln, 1)
                        ln = symbol1.sub(r'\1', ln, 1)
                    target.write(ln + '\n')
            target.truncate()

        if list_opt:
            # Write the list of squashed commits to the end of the message, but
            # only when there are more than one commit.
            entries = squashes[progress]
            single_commit = False
            if len(entries) == 1:
                commit_range_pat = re.compile(r'^\w+[.][.]\w+$')
                if not commit_range_pat.match(entries[0]):
                    single_commit = True

            if not single_commit:
                target.write('\nSquashed Commits:\n  ')
                target.write('\n  '.join(entries))
                target.write('\n')

        target.close()

        # Write a '*' to the end of the temp file to indicate progress
        tmpfile.write('*')
        tmpfile.close()

    else:
        # We should call git-rebase(1) using this script as both the sequence
        # editor and the commit message editor.

        # First generate the name of the temp file from the SHA1 hash of the
        # Git repo's root path.
        # This way we can still locate the file if the rebase is interrupted
        # and resumed later. On the other hand, there shouldn't be conflicts
        # as you can't have two simultaneous rebase operations in the same
        # Git repo.
        root_path = subprocess.check_output('git rev-parse --show-toplevel', shell=True).strip()
        rand = hashlib.sha1(root_path).hexdigest()[:6]
        tmpfn = path.join(tmpdir, 'tmp-' + rand)

        tmpfile = open(tmpfn, 'w')
        tmpfile.write('%s\n' % ns.list)
        tmpfile.close()

        env_str = 'GIT_SEQUENCE_EDITOR="%s --seqedit-%s" GIT_EDITOR="%s --comedit-%s"' % (__file__, rand, __file__, rand)
        cmd_str = '%s git rebase -i %s' % (env_str, ' '.join(remaining))
        try:
            proc = subprocess.Popen(cmd_str, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
            while proc.returncode == None:
                sleep(0.01)
                out = proc.stdout.read(1)
                while out != '':
                    sys.stdout.write(out)
                    sys.stdout.flush()
                    out = proc.stdout.read(1)
                err = proc.stderr.read(1)
                while err != '':
                    sys.stderr.write(err)
                    sys.stderr.flush()
                    err = proc.stderr.read(1)
                proc.poll()

            proc.stdout.close()
            proc.stderr.close()
            if proc.returncode != 0:
                exit(proc.returncode)
        except:
            exit(1)

        # Read the starting commit ID, ending commit ID and the number of commits
        # between them before rebasing from the second line in the temp file.
        # Read the number of commits after rebasing from the last line (the progress
        # indicator line) in the temp file.
        tmpfile = open(tmpfn, 'r')
        lines = tmpfile.read().splitlines()
        try:
            ln = lines[1]
        except IndexError:
            print 'Noop rebase completed.'
        else:
            (sc, ec, num) = ln.strip().split(' ')
            ln = lines[-1]
            num2 = len(ln.strip())
            print 'Squashed %s commits (%s..%s) into %s.' % (num, sc, ec, num2)
        tmpfile.close()

        # Finally delete the temp file
        os.remove(tmpfn)
